#include "ros/ros.h"
#include "std_msgs/Float64MultiArray.h"
#include "std_msgs/Float64.h"
#include "opencv2/opencv.hpp"
#include <raspicam/raspicam_cv.h>
#include <raspicam/raspicam.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <fstream>

using namespace std;
using namespace cv;

float currentHeading = 0.;

void CurrentHeadingCallback(const std_msgs::Float64::ConstPtr& msg){
  currentHeading = msg->data;
}

int main(int argc, char **argv){
  float centerX = 0.;
  float centerY = 0.;

  float bMin, bMax;
  float gMin, gMax;
  float rMin, rMax;
  
  fstream calibFile;
  
  calibFile.open("/home/pi/ns_catkin_ws/calibData/center_of_roi");
  calibFile >> centerX;
  calibFile >> centerY;
  calibFile.close();
  
  calibFile.open("/home/pi/ns_catkin_ws/calibData/bgr_ranges");
  calibFile >> bMin;
  calibFile >> bMax;
  calibFile >> gMin;
  calibFile >> gMax;
  calibFile >> rMin;
  calibFile >> rMax;
  calibFile.close();


  ros::init(argc, argv, "blob_detector");
  ros::NodeHandle n;
  ros::Rate loop_rate(20);
  ros::Publisher global_pub = n.advertise<std_msgs::Float64MultiArray>("blobBearings", 1000);
  ros::Publisher local_pub = n.advertise<std_msgs::Float64MultiArray>("blobBearingsLocal", 1000);

  ros::Subscriber currentHeadingSub = n.subscribe("currentHeading", 1000, CurrentHeadingCallback);

  raspicam::RaspiCam_Cv camera;
  cv::Mat rawImage;
  cv::Mat blueImage;
  cv::Mat rawImageKeyPoints;
  
  camera.set( CV_CAP_PROP_EXPOSURE, 100); // Set shutter speed 100 for passive beacons)
  

  if ( !camera.open()) printf("Error opening camera\n");
  bool keepGoing = true;
  int imageCounter = 0;
 
  SimpleBlobDetector::Params paramsRobotBeacon;
  paramsRobotBeacon.minThreshold = 200;
  paramsRobotBeacon.maxThreshold = 255;
  paramsRobotBeacon.minDistBetweenBlobs = 0.0f;
  paramsRobotBeacon.filterByColor = false;

  paramsRobotBeacon.filterByInertia = false;
  paramsRobotBeacon.minInertiaRatio = 0.75;
  paramsRobotBeacon.maxInertiaRatio = 1.0;
  
  paramsRobotBeacon.filterByConvexity = false;
  paramsRobotBeacon.minConvexity = 0.75;
  paramsRobotBeacon.maxConvexity = 1.0;

  paramsRobotBeacon.filterByCircularity = false;
  paramsRobotBeacon.minCircularity = 0.75;
  paramsRobotBeacon.maxCircularity = 1.0;
  paramsRobotBeacon.filterByArea = true;
  paramsRobotBeacon.minArea = 50.0f;
  paramsRobotBeacon.maxArea = 100000000.0f;

  SimpleBlobDetector detectorRobotBeacon(paramsRobotBeacon);
  bool first = true;
  while (ros::ok() and keepGoing){
    
    camera.grab();
    camera.retrieve(rawImage);
   
    // Create binary mask of blue regions and store it in blueImage  
    inRange(rawImage, cv::Scalar(bMin,gMin,rMin), cv::Scalar(bMax,gMax,rMax), blueImage);
    

    // Detect blobs in blueImage
    std::vector<KeyPoint> keypoints;
    detectorRobotBeacon.detect( blueImage, keypoints);

    /*for(int i = 0; i < keypoints.size(); i++)
      printf("Center: (%f, %f) \t Size:%f\n", keypoints[i].pt.x, keypoints[i].pt.y, keypoints[i].size);

    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    if(first or true){
      drawKeypoints( rawImage, keypoints, rawImageKeyPoints, Scalar(0,0,255), DrawMatchesFlags::DRAW_RICH_KEYPOINTS );
      cv::imwrite("blobDetectTest.jpg", rawImageKeyPoints);
      first = false;
    }
    
    getchar();*/

    std_msgs::Float64MultiArray msgGlobal;     
    std_msgs::Float64MultiArray msgLocal;     
    
    msgGlobal.data.resize(keypoints.size()); 
    msgLocal.data.resize(keypoints.size());  
 
    for(int i = 0; i < keypoints.size(); i++){
      float blobX =  keypoints[i].pt.x;
      float blobY = keypoints[i].pt.y; 
      float blobSize = keypoints[i].size; 
	
      // Use when forward is to the right in the image
      //float blobBearingLocal = atan2(blobY - centerY, blobX - centerX)*180./M_PI;

      // Use when forward is down in the image
      float blobBearingLocal = atan2( -1.*(blobX - centerX), blobY - centerY)*180./M_PI; 

      float blobBearingGlobal = blobBearingLocal + currentHeading;
      if(blobBearingGlobal < -180.) blobBearingGlobal += 360.;
      if(blobBearingGlobal > 180.) blobBearingGlobal -= 360.;
         
      msgGlobal.data[i] = blobBearingGlobal;
      msgLocal.data[i] = blobBearingLocal;
      
      //printf("%f\t%f\n", blobBearingGlobal, blobSize);
    }
    global_pub.publish(msgGlobal);
    local_pub.publish(msgLocal);
    //printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
   
    
    ros::spinOnce();
    
    loop_rate.sleep();
  }

  camera.release();
  
  return 0;
}
